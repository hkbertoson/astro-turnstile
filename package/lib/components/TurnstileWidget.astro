---
import {TURNSTILE_SITE_KEY} from 'astro:env/client';
import {AstroError} from 'astro/errors';

export interface Props {
	/**
	 * Theme of the Turnstile widget as per the [Turnstile documentation](https://developers.cloudflare.com/turnstile/get-started/client-side-rendering/#appearance-modes)
	 * @default "auto"
	 */
	theme?: 'auto' | 'light' | 'dark' | undefined;
	/**
	 * Size of the Turnstile widget as per the [Turnstile documentation](https://developers.cloudflare.com/turnstile/get-started/client-side-rendering/#appearance-modes)
	 * @default "normal"
	 */
	size?: 'normal' | 'compact' | 'flexible' | undefined;
	/**
	 * Margin of the Turnstile widget (CSS margin property)
	 * @default "0.5rem"
	 */
	margin?: string | undefined;

	/**
	 * Label for Button
	 * @default "Submit"
	 */
	buttonLabel?: string | undefined;
}

const {theme = 'auto', size = 'normal', margin = '0.5rem'} = Astro.props;

// Define the dimensions type for the different sizes
type Dimensions = {height: string; width: string; minWidth: string};

// Define the sizes object with the different style settings
type Sizes = Record<string, Dimensions>;

// Define the style settings for the different sizes
const sizes: Sizes = {
	normal: {height: '65px', width: '300px', minWidth: '300px'},
	flexible: {height: '65px', width: '100%', minWidth: '300px'},
	compact: {height: '140px', width: '150px', minWidth: '150px'},
};

// Define a function to get the style settings based on set the size
const getStyleSettings = (size: string): Dimensions => {
	// Get the style settings based on the size
	const styleSettings = sizes[size];

	// If the style settings exist, return the style settings
	if (styleSettings) {
		return styleSettings;
	}

	// If the style settings do not exist, throw an error
	throw new AstroError(
		`Invalid size: ${size}`,
		`'size' must be one of the following: ${Object.keys(sizes).join(', ')}.`,
	);
};

// Destructure the height, width, and minWidth from the style settings
const {
	height: turnstileHeight,
	width: turnstileWidth,
	minWidth: turnstileMinWidth,
} = getStyleSettings(size);
---

<!-- Component: Turnstile -->
<div
	id="at-turnstile-captcha"
	data-sitekey={TURNSTILE_SITE_KEY}
	data-theme={theme}
	data-size={size}
>
</div>

<style
	scoped
	define:vars={{
		turnstileHeight,
		turnstileWidth,
		turnstileMinWidth,
		turnstileMargin: margin,
	}}
>
	#at-turnstile-captcha {
		height: var(--turnstileHeight);
		width: var(--turnstileWidth);
		min-width: var(--turnstileMinWidth);
		margin: var(--turnstileMargin);
	}
</style>

<script is:inline>
	// Define the onloadTurnstileCallback function as per the Turnstile documentation
	// see https://developers.cloudflare.com/turnstile/get-started/client-side-rendering/#explicitly-render-the-turnstile-widget
	function onloadTurnstileCallback() {
		// Get the Turnstile configuration from the Turnstile form element
		const {dataset: TConfig} = document.getElementById(
			'at-turnstile-captcha',
		);

		// Render the Turnstile widget with the configuration
		turnstile.render('#at-turnstile-captcha', {
			sitekey: TConfig.sitekey,
			size: TConfig.size,
			theme: TConfig.theme,
		});
	}
</script>
